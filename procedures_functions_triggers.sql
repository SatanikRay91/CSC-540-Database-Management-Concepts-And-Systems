CREATE OR REPLACE Function AUTHENTICATE
   (UNAME IN LOGIN.USERNAME%type, PWD IN LOGIN.PASSWORD%type)
   RETURN LOGIN.ROLE%type
IS
   R LOGIN.ROLE%type;

   CURSOR c1
   IS
     SELECT L.ROLE FROM LOGIN L WHERE L.USERNAME = UNAME AND L.PASSWORD = PWD;

BEGIN

   OPEN c1;
   FETCH c1 INTO R;

   if c1%notfound then
      R := 'Not Found';
   end if;

   CLOSE c1;

RETURN R;

END;
/

----------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE 
	CHECK_FOR_RECEPTIONIST(SERVICECENTERID IN char,C OUT NUMBER) 
IS 
BEGIN 
	SELECT COUNT(M.POSITION) INTO C FROM MONTHLY M WHERE M.POSITION='receptionist' AND M.SID=SERVICECENTERID;
	COMMIT;
END;
/

----------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE 
	CREATECUSTOMER(EMAIL IN CUSTOMER.EMAIL%TYPE,PASSWORD IN LOGIN.PASSWORD%TYPE,NAME IN CUSTOMER.NAME%TYPE,ADDRESS IN CUSTOMER.ADDRESS%TYPE,PHONE IN CUSTOMER.PHONE%TYPE,SID IN SERVICE_CENTER.SID%TYPE)
IS
	C NUMBER;
BEGIN
	SELECT COUNT(*) INTO C FROM CUSTOMER;
	C := 1000+C+1;
	INSERT INTO CUSTOMER VALUES (C,NAME,EMAIL,PHONE,ADDRESS,SID);
	COMMIT;
	INSERT INTO LOGIN VALUES (EMAIL,PASSWORD,'customer');
	COMMIT;
END;
/

----------------------------------------------------------------------------------------------------------------------------------------

CREATE VIEW MMRC AS 
	SELECT C.LICENSE_PLATE,C.MAKE_NAME,C.MODEL,R.REQID,M.CATEGORYNAME 
	FROM CAR C, REQUEST R, MAINTENANCE_SERVICE M
	WHERE
		C.LICENSE_PLATE = R.LICENSE_PLATE AND R.REQID = M.REQID;
		
CREATE VIEW DURATION AS 		
	SELECT CEIL(SUM(B.ESTIMATED_TIME)*2) AS TOTALDUR,M.REQID,M.LICENSE_PLATE,M.CATEGORYNAME FROM BASIC_SERVICE B, MMRC M
	WHERE
		B.BASIC_SERVICE_ID IN (SELECT C.BASIC_SERVICE_ID FROM COMPOSED_OF C WHERE C.CATEGORY_NAME=M.CATEGORYNAME AND C.MAKE_NAME=M.MAKE_NAME AND C.MODEL=M.MODEL)
	GROUP BY M.REQID,M.LICENSE_PLATE,M.CATEGORYNAME;

MERGE INTO REQUEST 
USING 
(
  SELECT REQID,
         TOTALDUR
  FROM DURATION
) D ON (D.REQID = REQUEST.REQID)
WHEN MATCHED THEN UPDATE 
    SET REQUEST.DURATION = D.TOTALDUR;

CREATE VIEW REP_DURATION3 AS	 
SELECT CEIL(SUM(B.ESTIMATED_TIME)*2) AS TOTDUR, RS.REQID, REPAIR.R_NAME
FROM REPAIR, BASIC_SERVICE B, REPAIR_SERVICE RS, REQUEST R
WHERE RS.REQID = R.REQID
AND REPAIR.R_NAME=RS.R_NAME
AND B.BASIC_SERVICE_ID=REPAIR.BASIC_SERVICE_ID
GROUP BY RS.REQID, REPAIR.R_NAME;

MERGE INTO REQUEST
USING
(
  SELECT REQID, TOTDUR
  FROM REP_DURATION3
) RD ON (RD.REQID=REQUEST.REQID)
WHEN MATCHED THEN UPDATE
SET REQUEST.DURATION = RD.TOTDUR;

----------------------------------------------------------------------------------------------------------------------------------------

CREATE VIEW PARTCOUNT AS
SELECT CONTAINS.PARTID,CONTAINS.COUNT
	FROM CONTAINS  
	WHERE 
		CONTAINS.MODEL = (select MODEL from CAR c where c.LICENSE_PLATE = ?) 
		AND 
		CONTAINS.PARTID IN
			((select PARTID
			from PART_TYPE  
			Where make_name = (select make_name from CAR c where c.LICENSE_PLATE = ?))
			INTERSECT
			(SELECT U.PARTID
			FROM COMPOSED_OF CO, USES U
			WHERE (CO.CATEGORY_NAME,CO.MAKE_NAME,CO.MODEL) IN
			(SELECT CS.CATEGORY_NAME,CS.make_name,CS.model
			from CAR_SPECS CS 
			where (CS.make_name,CS.model) IN (select C.make_name,C.model from CAR C where C.LICENSE_PLATE=?)
			and CS.MILES <?
			)
			AND U.BASIC_SERVICE_ID = CO.BASIC_SERVICE_ID
			));

CREATE VIEW THRESHOLDCOUNT AS			
SELECT INVENTORY.PARTID,INVENTORY.MIN_QUANTITY,INVENTORY.QUANTITY,INVENTORY.SID FROM INVENTORY WHERE 
INVENTORY.SID = (   SELECT SC.SID 
		FROM CAR,CUSTOMER,SERVICE_CENTER SC
		WHERE CAR.LICENSE_PLATE = ?
		AND CAR.CUSID = CUSTOMER.CUSID
		AND SC.SID = CUSTOMER.SID   )
AND
INVENTORY.PARTID IN
(SELECT CONTAINS.PARTID
	FROM CONTAINS  
	WHERE 
		CONTAINS.MODEL = (select MODEL from CAR c where c.LICENSE_PLATE = ?) 
		AND 
		CONTAINS.PARTID IN
			((select PARTID
			from PART_TYPE  
			Where make_name = (select make_name from CAR c where c.LICENSE_PLATE = ?))
			INTERSECT
			(SELECT U.PARTID
			FROM COMPOSED_OF CO, USES U
			WHERE (CO.CATEGORY_NAME,CO.MAKE_NAME,CO.MODEL) IN
			(SELECT CS.CATEGORY_NAME,CS.make_name,CS.model
			from CAR_SPECS CS 
			where (CS.make_name,CS.model) IN (select C.make_name,C.model from CAR C where C.LICENSE_PLATE=?)
			and CS.MILES < ?
			)
			AND U.BASIC_SERVICE_ID = CO.BASIC_SERVICE_ID
			)));

CREATE VIEW SCHEDULE_VIEW AS 
SELECT THRESHOLDCOUNT.SID,THRESHOLDCOUNT.PARTID,THRESHOLDCOUNT.QUANTITY,THRESHOLDCOUNT.MIN_QUANTITY,PARTCOUNT.COUNT FROM THRESHOLDCOUNT
INNER JOIN  PARTCOUNT
ON THRESHOLDCOUNT.PARTID = PARTCOUNT.PARTID;

CREATE OR REPLACE Function SCHEDULEAPPOINTMENT
   RETURN DATE
IS
	SLOTCOUNT INT;
	FOUND char := 'F';
	DAYINCR INT := 0;
	DTCHECK DATE := SYSDATE;
	DTVAL DATE;
	CNTCHK INT;
BEGIN
	SELECT COUNT(*) INTO CNTCHK FROM SCHEDULE_VIEW S1, SCHEDULE_VIEW S2 WHERE S1.PARTID = S2.PARTID AND S1.QUANTITY < S2.MIN_QUANTITY;
	IF CNTCHK = 0 THEN
		WHILE FOUND = 'F'
		LOOP
			SELECT SUM(DUMMYREQUEST.SLOTS_BOOKED) INTO SLOTCOUNT FROM DUMMYREQUEST WHERE REQ_DATE = DTCHECK;
			IF SLOTCOUNT > 14 THEN
				DAYINCR := DAYINCR+1;
				DTCHECK := DTCHECK+DAYINCR;
			ELSE
				DTVAL := DTCHECK;
				FOUND := 'T';
			END IF;
		END LOOP;
	END IF;
RETURN DTVAL;
END;
/

----------------------------------------------------------------------------------------------------------------------------------------

